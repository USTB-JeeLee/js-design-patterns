/*1.普通的单体
2.具有局部变量的强大单体
3.惰性单体
4.分支单体*/

// 优点：
// 可以用来划分命名空间，减少全局变量的数量。
// 使用单体模式可以使代码组织的更为一致，使代码容易阅读和维护。
// 可以被实例化，且实例化一次。

/*单体模式在JS中使用非常地频繁
通过确保单体对象只存在一个实例
你就可以确信自己所有的代码中使用的是全局资源*/

(function(){
	//先看来一个最简单的单体
	//例如用户登录后的信息可以用一个单体存储
	var UserInfo = {
		name: 'lijin',
		code: '010101',
		deptName: 'PD',
		deptCode: 'PD001',
		getName: function(){
			return 'JeeLee'
		}
	}
	alert(UserInfo.getName());
	//这就是一个最简单的单体
	//他用来划分命名空间，并且将一群相关的属性和方法组织在一起
	var comm = {};
	comm.UserInfo = {
		name: 'lijin',
		code: '101010'
	}
	comm.funInfo = {
		funcName: '',
		funcCode: ''
	}
	//在大型的项目下，存在这你写的代码，还有你引用外界JS类库
	//还有其它同事写的代码和类库
	//我们通过单体模式就可以很好地区分
	//这点你只能慢慢地体会了
})()